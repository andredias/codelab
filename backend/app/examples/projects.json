[
  {
    "sources": {
      "chaining_operators.py": "x = 5\nprint(1 < x < 10)\nprint(10 < x < 20)\nprint(x < 10 < (x * 10) < 100)\nprint(10 > x <= 9)\nprint(5 == x > 4)\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python chaining_operators.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "Chaining Operators",
    "description": "",
    "id": "f992651f047b5a1b2442846e8df145cd",
    "responses": [
      {
        "stdout": "True\nFalse\nTrue\nTrue\nTrue\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "decorators.py": "def print_args(function):\n\n    def wrapper(*args, **kwargs):\n        print('Arguments:', args, kwargs)\n        return function(*args, **kwargs)\n\n    return wrapper\n\n\n@print_args\ndef write(text):\n    print(text)\n\n\nwrite('foo')\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python decorators.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "Decorators",
    "description": "",
    "id": "ecd62ca7e2ff4d24172c1226440e6bb8",
    "responses": [
      {
        "stdout": "Arguments: ('foo',) {}\nfoo\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "array_indexes.py": "a = [1, 2, 3, 4, 5]\nprint(a[::2])  # iterate over the whole list in 2-increments\nprint(a[::-1])  # a useful idiom for 'x reversed'\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python array_indexes.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "Array Indexes",
    "description": "",
    "id": "272bbc50a7bf8be588e12926541c05d1",
    "responses": [
      {
        "stdout": "[1, 3, 5]\n[5, 4, 3, 2, 1]\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "arguments_unpacking.py": "def draw_point(x, y):\n    print(x, y)\n\n\npoint_foo = (3, 4)\npoint_bar = {'y': 3, 'x': 2}\ndraw_point(*point_foo)\ndraw_point(**point_bar)\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python arguments_unpacking.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "Unpacking Arguments",
    "description": "",
    "id": "63a90fb000c36f867dfe96459a986318",
    "responses": [
      {
        "stdout": "3 4\n2 3\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "memoize_factorial_combination_permutation.py": "class memoize(dict):\n\n    def __init__(self, func):\n        dict.__init__(self)\n        self.func = func\n\n    def __call__(self, *args):\n        return self[args]\n\n    def __missing__(self, key):\n        result = self[key] = self.func(*key)\n        return result\n\n\n@memoize\ndef factorial(n):\n    if n < 2:\n        return n\n    else:\n        return n * factorial(n - 1)\n\n\ndef combination(n, k):\n    return factorial(n) // factorial(n - k)\n\n\ndef permutation(n, k):\n    return combination(n, k) // factorial(k)\n\n\nprint(factorial(5), combination(33, 6), permutation(33, 6))\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python memoize_factorial_combination_permutation.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "Memoize Decorator, Factorial, Combination and Permutation",
    "description": "",
    "id": "b5021628594ef48436a9ec651e734a78",
    "responses": [
      {
        "stdout": "120 797448960 1107568\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "hello_world.py": "print(\"Hello, world!\")\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python hello_world.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "Hello World",
    "description": "",
    "id": "2a1e6e1aab91134494499768d8fcf136",
    "responses": [
      {
        "stdout": "Hello, world!\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "fizzbuzz.py": "for x in range(1, 101):\n    line = ''\n    if x % 3 == 0:\n        line += 'Fizz'\n    if x % 5 == 0:\n        line += 'Buzz'\n    if not line:\n        line = str(x)\n    print(line)\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python fizzbuzz.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "FizzBuzz Technical Challenge",
    "description": "Write a program that prints the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\".\n\nsee: http://blog.codinghorror.com/why-cant-programmers-program/",
    "id": "d66a1526883524de5266e9301dac3ce4",
    "responses": [
      {
        "stdout": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\nBuzz\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "enumerate.py": "a = ['a', 'b', 'c', 'd', 'e']\nfor index, item in enumerate(a):\n    print(index, item)\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python enumerate.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "",
    "description": "",
    "id": "e12fc4c0340a9633e1da02af64e97e43",
    "responses": [
      {
        "stdout": "0 a\n1 b\n2 c\n3 d\n4 e\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  },
  {
    "sources": {
      "generators.py": "odds = (n for n in range(1, 20) if n % 2)\nfor n in odds:\n    print(n)\n"
    },
    "commands": [
      {
        "type": null,
        "command": "python generators.py",
        "timeout": 0.1,
        "input": null
      }
    ],
    "title": "",
    "description": "",
    "id": "daed52a6d2aade4ddda9c536a840b595",
    "responses": [
      {
        "stdout": "1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n",
        "stderr": "",
        "exit_code": 0
      }
    ]
  }
]
